from tensorflow.keras.models import VGG16
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras import Model

# Load the VGG16 model with pre-trained ImageNet weights, excluding the top classification layers
vgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the layers of VGG16
for layer in vgg16.layers:
    layer.trainable = False

# Add custom layers on top of VGG16 for specific tasks
x = Flatten()(vgg16.output)
x = Dense(1024, activation='relu')(x)
x = Dense(1, activation='sigmoid')(x)

# Define the model
model_vgg16 = Model(inputs=vgg16.input, outputs=x)

# Compile the model
model_vgg16.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Summary of the model
model_vgg16.summary()
