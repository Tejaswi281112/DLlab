from tensorflow import keras
from keras import Model, Sequential
from keras.layers import Input, Conv2D, BatchNormalization, MaxPool2D, Flatten, Dense, Dropout
import tensorflow as tf
import numpy as np
python
Copy
Edit
input_shape = (4, 28, 28, 3)
x = tf.random.normal(input_shape)
y = tf.keras.layers.Flatten()(x)
print(x.shape)
print(y.shape)
python
Copy
Edit
x = tf.random.normal(input_shape)
x = tf.keras.layers.Flatten()(x)
y = tf.keras.layers.Dense(1000, activation='relu')(x)
print(x.shape)
print(y.shape)
python
Copy
Edit
input_shape = (10,)
x = Input(shape=input_shape)
y = tf.keras.layers.Dense(100, activation='relu')(x)
model = Model(inputs=x, outputs=y)
python
Copy
Edit
model.compile(
    optimizer=tf.keras.optimizers.Adam(0.001),
    loss=tf.keras.losses.categorical_crossentropy,
    metrics=[tf.keras.metrics.CategoricalAccuracy()]
)
model.summary()
python
Copy
Edit
input_shape = (4, 28, 28, 3)
x = tf.random.normal(input_shape)
print(f"x: {x.shape}")
y = tf.keras.layers.Conv2D(filters=16, kernel_size=5, padding='valid', strides=1, activation='relu', input_shape=input_shape[1:])(x)
print(f"y: {y.shape}")
z = Conv2D(filters=2, kernel_size=3, padding='same', strides=1, activation='relu', input_shape=input_shape[1:])(x)
print(f"z: {z.shape}")
python
Copy
Edit
x = tf.constant([[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]])
x = tf.reshape(x, [1, 3, 3, 1])
max_pool_2d = tf.keras.layers.MaxPool2D(pool_size=(2, 2), strides=1, padding='valid')
max_pool_2d(x)
python
Copy
Edit
tf.random.set_seed(0)
layer = tf.keras.layers.Dropout(0.6, input_shape=(2,))
data = np.arange(10).reshape(5, 2).astype(np.float32)
print(data)
outputs = layer(data, training=True)
print(outputs)
