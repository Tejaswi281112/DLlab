from keras.models import Model
from keras.layers import Input, LSTM, Dense
import numpy as np
python
Copy
Edit
batch_size = 64
epochs = 100
latent_dim = 256
num_samples = 10000
data_path = '/content/sample_data/fra.txt'
python
Copy
Edit
input_texts = []
target_texts = []
input_chars = set()
target_chars = set()
python
Copy
Edit
with open(data_path, 'r', encoding='utf-8') as f:
    lines = f.read().split('\n')[:num_samples]
python
Copy
Edit
for line in lines:
    if not line:
        continue
    input_text, target_text = line.split('\t')[:2]
    target_text = '\t' + target_text + '\n'
    input_texts.append(input_text)
    target_texts.append(target_text)
    input_chars.update(input_text)
    target_chars.update(target_text)
python
Copy
Edit
input_chars = sorted(input_chars)
target_chars = sorted(target_chars)
num_encoder_tokens = len(input_chars)
num_decoder_tokens = len(target_chars)
max_encoder_len = max(len(txt) for txt in input_texts)
max_decoder_len = max(len(txt) for txt in target_texts)
python
Copy
Edit
input_token_idx = {char: i for i, char in enumerate(input_chars)}
target_token_idx = {char: i for i, char in enumerate(target_chars)}
python
Copy
Edit
encoder_input_data = np.zeros((len(input_texts), max_encoder_len, num_encoder_tokens), dtype='float32')
decoder_input_data = np.zeros((len(input_texts), max_decoder_len, num_decoder_tokens), dtype='float32')
decoder_target_data = np.zeros((len(input_texts), max_decoder_len, num_decoder_tokens), dtype='float32')
python
Copy
Edit
for i, (input_text, target_text) in enumerate(zip(input_texts, target_texts)):
    for t, char in enumerate(input_text):
        encoder_input_data[i, t, input_token_idx[char]] = 1.
    for t, char in enumerate(target_text):
        decoder_input_data[i, t, target_token_idx[char]] = 1.
        if t > 0:
            decoder_target_data[i, t - 1, target_token_idx[char]] = 1.
python
Copy
Edit
encoder_inputs = Input(shape=(None, num_encoder_tokens))
encoder = LSTM(latent_dim, return_state=True)
encoder_outputs, state_h, state_c = encoder(encoder_inputs)
encoder_states = [state_h, state_c]
python
Copy
Edit
decoder_inputs = Input(shape=(None, num_decoder_tokens))
decoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)
decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)
decoder_dense = Dense(num_decoder_tokens, activation='softmax')
decoder_outputs = decoder_dense(decoder_outputs)
python
Copy
Edit
model = Model([encoder_inputs, decoder_inputs], decoder_outputs)
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])
python
Copy
Edit
model.fit(
    [encoder_input_data, decoder_input_data],
    decoder_target_data,
    batch_size=batch_size,
    epochs=epochs,
    validation_split=0.2
)
python
Copy
Edit
model.save('s2s.h5')
python
Copy
Edit
encoder_model = Model(encoder_inputs, encoder_states)
decoder_state_input_h = Input(shape=(latent_dim,))
decoder_state_input_c = Input(shape=(latent_dim,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
decoder_outputs, state_h, state_c = decoder_lstm(decoder_inputs, initial_state=decoder_states_inputs)
decoder_states = [state_h, state_c]
decoder_outputs = decoder_dense(decoder_outputs)
decoder_model = Model([decoder_inputs] + decoder_states_inputs, [decoder_outputs] + decoder_states)
python
Copy
Edit
reverse_target_char_index = {i: char for char, i in target_token_idx.items()}
python
Copy
Edit
def decode_sequence(input_seq):
    states_value = encoder_model.predict(input_seq)
    target_seq = np.zeros((1, 1, num_decoder_tokens))
    target_seq[0, 0, target_token_idx['\t']] = 1.
    decoded_sentence = ''
    stop_condition = False
    while not stop_condition:
        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_char = reverse_target_char_index[sampled_token_index]
        decoded_sentence += sampled_char
        if sampled_char == '\n' or len(decoded_sentence) > max_decoder_len:
            stop_condition = True
        target_seq = np.zeros((1, 1, num_decoder_tokens))
        target_seq[0, 0, sampled_token_index] = 1.
        states_value = [h, c]
    return decoded_sentence
python
Copy
Edit
for seq_index in range(20):
    input_seq = encoder_input_data[seq_index:seq_index+1]
    decoded = decode_sequence(input_seq)
    print(f"\nInput: {input_texts[seq_index]}")
    print(f"Output: {decoded}")
