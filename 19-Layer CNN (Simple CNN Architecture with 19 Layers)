from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model_cnn19 = Sequential()

# Convolutional layers and MaxPooling layers
model_cnn19.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model_cnn19.add(MaxPooling2D(pool_size=(2, 2)))
model_cnn19.add(Conv2D(64, (3, 3), activation='relu'))
model_cnn19.add(MaxPooling2D(pool_size=(2, 2)))
model_cnn19.add(Conv2D(128, (3, 3), activation='relu'))
model_cnn19.add(MaxPooling2D(pool_size=(2, 2)))
model_cnn19.add(Conv2D(128, (3, 3), activation='relu'))
model_cnn19.add(MaxPooling2D(pool_size=(2, 2)))
model_cnn19.add(Conv2D(256, (3, 3), activation='relu'))
model_cnn19.add(MaxPooling2D(pool_size=(2, 2)))

# Flattening and fully connected layers
model_cnn19.add(Flatten())
model_cnn19.add(Dense(512, activation='relu'))
model_cnn19.add(Dropout(0.5))
model_cnn19.add(Dense(512, activation='relu'))
model_cnn19.add(Dropout(0.5))
model_cnn19.add(Dense(256, activation='relu'))
model_cnn19.add(Dropout(0.5))
model_cnn19.add(Dense(128, activation='relu'))

# Output layer
model_cnn19.add(Dense(1, activation='sigmoid'))

# Compile the model
model_cnn19.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Summary of the model
model_cnn19.summary()
