import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
python
Copy
Edit
df = yf.download('AAPL', start='2020-01-01', end='2023-01-01')['Close']
python
Copy
Edit
plt.figure(figsize=(12, 5))
plt.plot(df)
plt.title('Apple Stock Price')
plt.show()
python
Copy
Edit
scaler = MinMaxScaler(feature_range=(0, 1))
data = scaler.fit_transform(df.values.reshape(-1, 1))
python
Copy
Edit
def create_sequences(data, seq_length=50):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i + seq_length])
        y.append(data[i + seq_length])
    return np.array(X), np.array(y)
python
Copy
Edit
X, y = create_sequences(data)
X_train, X_test = X[:int(0.8 * len(X))], X[int(0.8 * len(X)):]
y_train, y_test = y[:int(0.8 * len(y))], y[int(0.8 * len(y)):]
python
Copy
Edit
model = Sequential([
    SimpleRNN(50, return_sequences=True, input_shape=(50, 1)),
    SimpleRNN(50),
    Dense(1)
])
python
Copy
Edit
model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))
python
Copy
Edit
predictions = scaler.inverse_transform(model.predict(X_test))
y_test_actual = scaler.inverse_transform(y_test)
python
Copy
Edit
plt.figure(figsize=(12, 5))
plt.plot(y_test_actual, label='Actual')
plt.plot(predictions, label='Predicted')
plt.legend()
plt.show()
