import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load IMDb dataset
max_features = 10000  # Number of words to consider as features
maxlen = 200  # Maximum length of the input sequences

# Load training and test data
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)

# Pad the sequences to ensure uniform input size
x_train = pad_sequences(x_train, maxlen=maxlen)
x_test = pad_sequences(x_test, maxlen=maxlen)

# Build the LSTM model
model = Sequential()

# Embedding layer to convert integer tokens into dense vectors of fixed size
model.add(Embedding(input_dim=max_features, output_dim=128, input_length=maxlen))

# LSTM layer for sequence processing
model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))

# Fully connected layer with 1 neuron for binary classification (positive/negative)
model.add(Dense(1, activation='sigmoid'))

# Compile the model with RMSProp optimizer and binary crossentropy loss function
model.compile(optimizer=RMSprop(), loss='binary_crossentropy', metrics=['accuracy'])

# Summary of the model
model.summary()

# Train the model
history = model.fit(x_train, y_train, epochs=5, batch_size=64, validation_data=(x_test, y_test))

# Evaluate the model
score, accuracy = model.evaluate(x_test, y_test, batch_size=64)
print(f'Test accuracy: {accuracy:.4f}')
