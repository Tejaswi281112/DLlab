from tensorflow import keras
from tensorflow.keras.utils import plot_model, to_categorical
from sklearn.model_selection import train_test_split
import tensorflow as tf
import numpy as np
python
Copy
Edit
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
python
Copy
Edit
x_train, x_test = x_train[..., np.newaxis]/255.0, x_test[..., np.newaxis]/255.0
print(x_train.shape, x_test.shape)
python
Copy
Edit
x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)
print(x_train.shape, y_train.shape, x_val.shape, y_val.shape, x_test.shape, y_test.shape)
python
Copy
Edit
import matplotlib.pyplot as plt
plt.imshow(x_train[2, :, :, 0], cmap='gray')
plt.colorbar()
python
Copy
Edit
y_train_cat = to_categorical(y_train)
y_val_cat = to_categorical(y_val)
y_test_cat = to_categorical(y_test)
python
Copy
Edit
model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])
python
Copy
Edit
model.compile(
    optimizer=tf.keras.optimizers.Adam(0.001),
    loss=tf.keras.losses.categorical_crossentropy,
    metrics=[tf.keras.metrics.CategoricalAccuracy()]
)
model.summary()
python
Copy
Edit
plot_model(model, show_shapes=True)
python
Copy
Edit
history = model.fit(x_train, y_train_cat, epochs=5, validation_data=(x_val, y_val_cat))
python
Copy
Edit
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy')
plt.legend()
python
Copy
Edit
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss')
plt.legend()
plt.show()
python
Copy
Edit
test_loss, test_acc = model.evaluate(x_test, y_test_cat)
print(f"\nTest accuracy: {test_acc:.4f}")
